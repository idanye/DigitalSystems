function Board.new 0
push constant 6
call Memory.alloc 1
pop pointer 0
push constant 10
pop this 2
push this 2
call Array.new 1
pop this 1
push pointer 0
call Board.erase 1
pop temp 0
push pointer 0
call Board.drawBoard 1
pop temp 0
push pointer 0
return
function Board.dispose 0
push argument 0
pop pointer 0
push constant 0
call Screen.setColor 1
pop temp 0
push constant 200
push constant 60
push constant 320
push constant 180
call Screen.drawRectangle 4
pop temp 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push this 1
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Board.drawBoard 0
push argument 0
pop pointer 0
push constant 238
push constant 60
push constant 242
push constant 180
call Screen.drawRectangle 4
pop temp 0
push constant 278
push constant 60
push constant 282
push constant 180
call Screen.drawRectangle 4
pop temp 0
push constant 200
push constant 98
push constant 320
push constant 102
call Screen.drawRectangle 4
pop temp 0
push constant 200
push constant 138
push constant 320
push constant 142
call Screen.drawRectangle 4
pop temp 0
push constant 0
return
function Board.erase 1
push argument 0
pop pointer 0
push constant 1
pop local 0
push constant 0
push this 1
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
label WHILE_EXP0
push local 0
push this 2
lt
not
if-goto WHILE_END0
push local 0
push this 1
add
push constant 1
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Board.drawX 4
push argument 0
pop pointer 0
push argument 1
push this 1
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push argument 1
push constant 0
gt
push argument 1
push constant 4
lt
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 200
push argument 1
push constant 1
sub
push constant 40
call Math.multiply 2
add
pop local 0
push constant 200
push argument 1
push constant 40
call Math.multiply 2
add
pop local 1
push constant 60
pop local 2
push constant 100
pop local 3
push local 0
push local 2
push local 1
push local 3
call Screen.drawLine 4
pop temp 0
push local 1
push local 2
push local 0
push local 3
call Screen.drawLine 4
pop temp 0
label IF_FALSE0
push argument 1
push constant 3
gt
push argument 1
push constant 7
lt
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 1
push constant 3
sub
pop argument 1
push constant 200
push argument 1
push constant 1
sub
push constant 40
call Math.multiply 2
add
pop local 0
push constant 200
push argument 1
push constant 40
call Math.multiply 2
add
pop local 1
push constant 100
pop local 2
push constant 140
pop local 3
push local 0
push local 2
push local 1
push local 3
call Screen.drawLine 4
pop temp 0
push local 1
push local 2
push local 0
push local 3
call Screen.drawLine 4
pop temp 0
label IF_FALSE1
push argument 1
push constant 6
gt
push argument 1
push constant 10
lt
and
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 1
push constant 6
sub
pop argument 1
push constant 200
push argument 1
push constant 1
sub
push constant 40
call Math.multiply 2
add
pop local 0
push constant 200
push argument 1
push constant 40
call Math.multiply 2
add
pop local 1
push constant 140
pop local 2
push constant 180
pop local 3
push local 0
push local 2
push local 1
push local 3
call Screen.drawLine 4
pop temp 0
push local 1
push local 2
push local 0
push local 3
call Screen.drawLine 4
pop temp 0
label IF_FALSE2
push constant 0
not
pop this 3
push constant 0
return
function Board.drawO 7
push argument 0
pop pointer 0
push constant 15
pop local 6
push argument 1
push this 1
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push argument 1
push constant 0
gt
push argument 1
push constant 4
lt
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 200
push argument 1
push constant 1
sub
push constant 40
call Math.multiply 2
add
pop local 0
push constant 200
push argument 1
push constant 40
call Math.multiply 2
add
pop local 1
push constant 60
pop local 2
push constant 100
pop local 3
push local 0
push local 1
add
push constant 2
call Math.divide 2
pop local 4
push local 2
push local 3
add
push constant 2
call Math.divide 2
pop local 5
push local 4
push local 5
push local 6
push constant 1
add
call Screen.drawCircle 3
pop temp 0
push constant 0
call Screen.setColor 1
pop temp 0
push local 4
push local 5
push local 6
call Screen.drawCircle 3
pop temp 0
push constant 0
not
call Screen.setColor 1
pop temp 0
label IF_FALSE0
push argument 1
push constant 3
gt
push argument 1
push constant 7
lt
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 1
push constant 3
sub
pop argument 1
push constant 200
push argument 1
push constant 1
sub
push constant 40
call Math.multiply 2
add
pop local 0
push constant 200
push argument 1
push constant 40
call Math.multiply 2
add
pop local 1
push constant 100
pop local 2
push constant 140
pop local 3
push local 0
push local 1
add
push constant 2
call Math.divide 2
pop local 4
push local 2
push local 3
add
push constant 2
call Math.divide 2
pop local 5
push local 4
push local 5
push local 6
push constant 1
add
call Screen.drawCircle 3
pop temp 0
push constant 0
call Screen.setColor 1
pop temp 0
push local 4
push local 5
push local 6
call Screen.drawCircle 3
pop temp 0
push constant 0
not
call Screen.setColor 1
pop temp 0
label IF_FALSE1
push argument 1
push constant 7
gt
push argument 1
push constant 10
lt
and
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 1
push constant 6
sub
pop argument 1
push constant 200
push argument 1
push constant 1
sub
push constant 40
call Math.multiply 2
add
pop local 0
push constant 200
push argument 1
push constant 40
call Math.multiply 2
add
pop local 1
push constant 140
pop local 2
push constant 180
pop local 3
push local 0
push local 1
add
push constant 2
call Math.divide 2
pop local 4
push local 2
push local 3
add
push constant 2
call Math.divide 2
pop local 5
push local 4
push local 5
push local 6
push constant 1
add
call Screen.drawCircle 3
pop temp 0
push constant 0
call Screen.setColor 1
pop temp 0
push local 4
push local 5
push local 6
call Screen.drawCircle 3
pop temp 0
push constant 0
not
call Screen.setColor 1
pop temp 0
label IF_FALSE2
push constant 0
pop this 3
push constant 0
return
function Board.isComputerTurn 0
push argument 0
pop pointer 0
push this 3
return
function Board.isCellFree 0
push argument 0
pop pointer 0
push argument 1
push this 1
add
pop pointer 1
push that 0
push constant 1
neg
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
return
label IF_FALSE0
push constant 0
return
function Board.getRandomIndex 1
push argument 0
pop pointer 0
push constant 500
call Random.new 1
pop this 0
push this 0
push this 2
call Random.randRange 2
pop local 0
label WHILE_EXP0
push pointer 0
push local 0
call Board.isCellFree 2
not
not
if-goto WHILE_END0
push this 0
push this 2
call Random.randRange 2
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Board.isWin 0
push argument 0
pop pointer 0
push constant 1
push this 1
add
pop pointer 1
push that 0
push argument 1
eq
push constant 5
push this 1
add
pop pointer 1
push that 0
push argument 1
eq
and
push constant 9
push this 1
add
pop pointer 1
push that 0
push argument 1
eq
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
return
label IF_FALSE0
push constant 3
push this 1
add
pop pointer 1
push that 0
push argument 1
eq
push constant 5
push this 1
add
pop pointer 1
push that 0
push argument 1
eq
and
push constant 7
push this 1
add
pop pointer 1
push that 0
push argument 1
eq
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
not
return
label IF_FALSE1
push constant 1
push this 1
add
pop pointer 1
push that 0
push argument 1
eq
push constant 2
push this 1
add
pop pointer 1
push that 0
push argument 1
eq
and
push constant 3
push this 1
add
pop pointer 1
push that 0
push argument 1
eq
and
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
not
return
label IF_FALSE2
push constant 4
push this 1
add
pop pointer 1
push that 0
push argument 1
eq
push constant 5
push this 1
add
pop pointer 1
push that 0
push argument 1
eq
and
push constant 6
push this 1
add
pop pointer 1
push that 0
push argument 1
eq
and
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 0
not
return
label IF_FALSE3
push constant 7
push this 1
add
pop pointer 1
push that 0
push argument 1
eq
push constant 8
push this 1
add
pop pointer 1
push that 0
push argument 1
eq
and
push constant 9
push this 1
add
pop pointer 1
push that 0
push argument 1
eq
and
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 0
not
return
label IF_FALSE4
push constant 1
push this 1
add
pop pointer 1
push that 0
push argument 1
eq
push constant 4
push this 1
add
pop pointer 1
push that 0
push argument 1
eq
and
push constant 7
push this 1
add
pop pointer 1
push that 0
push argument 1
eq
and
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 0
not
return
label IF_FALSE5
push constant 2
push this 1
add
pop pointer 1
push that 0
push argument 1
eq
push constant 5
push this 1
add
pop pointer 1
push that 0
push argument 1
eq
and
push constant 8
push this 1
add
pop pointer 1
push that 0
push argument 1
eq
and
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push constant 0
not
return
label IF_FALSE6
push constant 3
push this 1
add
pop pointer 1
push that 0
push argument 1
eq
push constant 6
push this 1
add
pop pointer 1
push that 0
push argument 1
eq
and
push constant 9
push this 1
add
pop pointer 1
push that 0
push argument 1
eq
and
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push constant 0
not
return
label IF_FALSE7
push constant 0
return
function Board.isDraw 0
push argument 0
pop pointer 0
push pointer 0
call Board.getNumOfFreeCells 1
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
return
label IF_FALSE0
push constant 0
return
function Board.getNumOfFreeCells 2
push argument 0
pop pointer 0
push constant 1
pop local 0
push constant 0
pop local 1
label WHILE_EXP0
push local 0
push this 2
lt
not
if-goto WHILE_END0
push local 0
push this 1
add
pop pointer 1
push that 0
push constant 1
neg
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
push constant 1
add
pop local 1
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 1
return
